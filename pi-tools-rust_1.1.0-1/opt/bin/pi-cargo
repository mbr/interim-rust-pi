#!/usr/bin/python

import os
import sys


def prefix_path(varname, *paths):
    p = os.environ.get(varname, None)

    nps = os.pathsep.join(paths)

    if p is not None:
        return nps + os.pathsep + p

    return nps


TOOLS_DIR = '/opt/pi-tools/gcc-linaro-arm-linux-gnueabihf-raspbian-x64'
RUST_DIR = '/opt/pi-tools/rust'

new_env = {}

# for the gcc-sysroot script
new_env['SYSROOT'] = ('/opt/pi-tools/arm-bcm2708hardfp-linux-gnueabi/'
                      'arm-bcm2708hardfp-linux-gnueabi/sysroot')

# stdlibs
new_env['LD_LIBRARY_PATH'] = prefix_path('LD_LIBRARY_PATH',
                                         os.path.join(RUST_DIR, 'lib'))

# setup path
new_env['PATH'] = prefix_path(
    'PATH', '/opt/pi-tools/bin', os.path.join(RUST_DIR, 'bin'),
    os.path.join(TOOLS_DIR, 'bin'), )

# setup compiler and archiver
new_env['CC'] = 'gcc-sysroot'
new_env['AR'] = 'arm-linux-gnueabihf-ar'

# parse cargo args, apply --target only to those that support it
for arg in sys.argv[1:]:
    if not arg.startswith('-'):
        cmd = arg
        break
else:
    cmd = None

args = ['cargo'] + sys.argv[1:]

if cmd in ('bench', 'build', 'clean', 'doc', 'run', 'test'):
    args.append('--target=arm-unknown-linux-gnueabihf')

# execute cargo
env = os.environ.copy()
env.update(new_env)

os.execvpe(args[0], args, env)
